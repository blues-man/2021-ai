apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  generateName: init-gogs-
spec:
  taskSpec:
    params:
    - name: GOGS_USER
      type: string
      description: Gogs admin username
      default: gogs
    - name: GOGS_PASSWORD
      type: string
      description: Gogs admin password
      default: gogs
    - name: APP_REPO
      type: string
      description: Application repository
      default: https://github.com/blues-man/2021-ai
    - name: APP_REPO_NAME
      type: string
      description: Application repository name
      default: 2021-ai
    - name: APP_MANIFESTS_REPO
      type: string
      description: Application repository manifests
      default: https://github.com/blues-man/2021-ai-gitops
    - name: APP_MANIFESTS_REPO_NAME
      type: string
      description: Application repository manifests name
      default: 2021-ai-gitops
    stepTemplate:
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
    steps:
      - name: init-gogs
        image: quay.io/siamaksade/python-oc
        script: |
          #!/usr/bin/env python3

          import os
          import requests 

          gogs_user = "$(params.GOGS_USER)"
          gogs_pwd = "$(params.GOGS_PASSWORD)"
          webhookURL = "http://" + os.popen('oc get route el-webhook -o template --template="{{.spec.host}}"').read()
          gogsURL = "http://" + os.popen('oc get svc gogs -o template --template="{{.spec.clusterIP}}"').read() + ":3000"

          # create admin user
          data_user = {
          'user_name': gogs_user,
          'password': gogs_pwd,
          'retype': gogs_pwd,
          'email': 'admin@gogs.com'
          }

          resp = requests.post(url = gogsURL + "/user/sign_up", data = data_user) 

          if resp.status_code != 200:
            print("Error creating Gogs admin (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created admin user {}:{}".format(gogs_user, gogs_pwd))

          # create git repo $(params.APP_REPO_NAME)
          data_repo = '{"clone_addr": "$(params.APP_REPO)", "uid": 1, "repo_name": "$(params.APP_REPO_NAME)"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)  

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created git repo $(params.APP_REPO_NAME)")

          # configure webhook on app repo
          data_webhook = '{"type": "gogs", "config": { "url": "' + webhookURL + '", "content_type": "json"}, "events": ["push"], "active": true}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = gogsURL + "/api/v1/repos/" + gogs_user + "/$(params.APP_REPO_NAME)/hooks", 
                              headers = headers, 
                              auth = (gogs_user, gogs_pwd), 
                              data = data_webhook) 

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error configuring the webhook (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Configured webhook: " + webhookURL)

          # create git repo per manifests
          data_repo = '{"clone_addr": "$(params.APP_MANIFESTS_REPO)", "uid": 1, "repo_name": "$(params.APP_MANIFESTS_REPO_NAME)"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)  

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created git repo $(params.APP_MANIFESTS_REPO_NAME)")